'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ManageSaleBuilder = undefined;

var _xdr_generated = require('../generated/xdr_generated');

var _xdr_generated2 = _interopRequireDefault(_xdr_generated);

var _isUndefined = require('lodash/isUndefined');

var _isUndefined2 = _interopRequireDefault(_isUndefined);

var _base_operation = require('./base_operation');

var _jsXdr = require('js-xdr');

var _sale_request_builder = require('./sale_request_builder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class ManageSaleBuilder {
  /**
     * Creates request to update manage sale details
     * @param {object} opts
     * @param {number|string} opts.requestID - set to zero to create new request
     * @param {string} opts.saleID - ID of the sale to create new update details request
     * @param {object} opts.newDetails - new sale specific details
     * @param {object} opts.newDetails.name - name of the sale
     * @param {object} opts.newDetails.short_description - short description of the sale
     * @param {object} opts.newDetails.description - sale description
     * @param {object} opts.newDetails.logo - details of the logo
     * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
     * @returns {xdr.ManageSaleOp}
     */
  static createUpdateSaleDetailsRequest(opts) {
    if ((0, _isUndefined2.default)(opts.requestID)) {
      throw new Error('opts.requestID is invalid');
    }

    if ((0, _isUndefined2.default)(opts.saleID)) {
      throw new Error('opts.saleID is invalid');
    }

    _sale_request_builder.SaleRequestBuilder.validateDetail(opts.newDetails);

    let updateSaleDetailsData = new _xdr_generated2.default.UpdateSaleDetailsData({
      requestId: _jsXdr.UnsignedHyper.fromString(opts.requestID),
      newDetails: JSON.stringify(opts.newDetails),
      ext: new _xdr_generated2.default.UpdateSaleDetailsDataExt(_xdr_generated2.default.LedgerVersion.emptyVersion())
    });

    let manageSaleOp = new _xdr_generated2.default.ManageSaleOp({
      saleId: _jsXdr.UnsignedHyper.fromString(opts.saleID),
      data: new _xdr_generated2.default.ManageSaleOpData.createUpdateDetailsRequest(updateSaleDetailsData),
      ext: new _xdr_generated2.default.ManageSaleOpExt(_xdr_generated2.default.LedgerVersion.emptyVersion())
    });

    let opAttrs = {};
    opAttrs.body = _xdr_generated2.default.OperationBody.manageSale(manageSaleOp);
    _base_operation.BaseOperation.setSourceAccount(opAttrs, opts);
    return new _xdr_generated2.default.Operation(opAttrs);
  }

  /**
     * Creates manage sale operation for cancel sale
     * @param {object} opts
     * @param {string} opts.saleID - ID of the sale to cancel
     * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
     * @returns {xdr.ManageSaleOp}
     */
  static cancelSale(opts) {
    if ((0, _isUndefined2.default)(opts.saleID)) {
      throw new Error('opts.saleID is invalid');
    }

    let manageSaleOp = new _xdr_generated2.default.ManageSaleOp({
      saleId: _jsXdr.UnsignedHyper.fromString(opts.saleID),
      data: new _xdr_generated2.default.ManageSaleOpData.cancel(),
      ext: new _xdr_generated2.default.ManageSaleOpExt(_xdr_generated2.default.LedgerVersion.emptyVersion())
    });

    let opAttrs = {};
    opAttrs.body = _xdr_generated2.default.OperationBody.manageSale(manageSaleOp);
    _base_operation.BaseOperation.setSourceAccount(opAttrs, opts);
    return new _xdr_generated2.default.Operation(opAttrs);
  }

  static manageSaleToObject(result, attrs) {
    result.saleID = attrs.saleId().toString();
    switch (attrs.data().switch()) {
      case _xdr_generated2.default.ManageSaleAction.createUpdateDetailsRequest():
        {
          let data = attrs.data().updateSaleDetailsData();
          result.requestID = data.requestId().toString();
          result.newDetails = JSON.parse(data.newDetails());
          break;
        }
    }
  }
}
exports.ManageSaleBuilder = ManageSaleBuilder;